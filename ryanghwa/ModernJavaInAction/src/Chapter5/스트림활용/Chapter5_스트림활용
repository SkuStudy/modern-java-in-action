Chapter5 스트림활용

프레드케이트 필터링 : 인수를 받아서 일치하는 모든 요소를 포함하는 스트링을 반환

distinct(): 중복을 필터링한다.

takewhile : 리스트를 정렬후에 필터링작업으로 원하는 요소를 추출한다.
dropwhile : 리스트를 정렬후 거짓이되는 부분을 제거하고 나머지 요소를 추출

limit(3) : 3개의 요소를 반환할.
skip(2): 조건이 만족한 후 2개의 요소를 건너뛰고 반환


* map메서드를 이용하여 원하는 요소를 매핑 시켜 추출한다.

    (ex)
    1. 요리명 길이를 반환
       menu.stream()
        .map(Dish::getName)
        .map(String::length)
        .collect(toList())

    2. 고유문자 반환
       words.stream()
          .map(word->word.split(""))
          .distinct()
          .collect(toList));


flatMap(Arrays::stream) : 생성된 스트림을 하나의 스트림으로 평면화

anyMatch : 주어진 스트림에서 적어도 한 요소와 일치하는지 확인

noneMatch : 주어진 프레디케이트와 일치하는 요소가 없는지 확인

* anyMatch, allMatch,noneMach : 스트림 쇼트서킷 기법( &&, ||)연산을 활용

Optional이란 : null은 쉽게 에러를 일으 킬수 있으므로 optional을 만들어 버그를 피했다.

findFist와 findAny 요소의 반환 순서가 상관없다면 병렬 스트림에서 제약이 적은 findAny사용



5.5 리듀싱

리듀싱 연산이란 모든 스트림 요소를 처리해서 값으로 도출하는 것( 복잡한 질의를 표현하는 방법을 설명 )
=>  함수형 프로그래밍 언어 용어로는 폴드라고 한다.


- reduce
정적 sum메소드
int sum = numbers.stream().reduce(0, Integer::sum);

Optional<Integer> sum = numbers.stream().reduce((a,b) -> (a+b));
=> 스트림에 아무 요소도 없는 상황을 생각

특화스트림
- 특화 스트림 변환할 때에는 mapToInt, mapToDouble, mapToLong 세가지 메서드를 사용한다.

Stream.iterate와 Stream.generate를 이용하여 무한 스트림을 만들수 있다.
=> 고정된 컬렉션이 아닌 크기가 고정되지 않은 스트림을 만들 수 있다.
=> 언바운드 스트림

iterate : 생산된 값을 연속적으로 계산
generate: 생산된 값으 연속적으로 계산하지 않는다.

* 병렬코드는 발행자의 상태가 있으면 안전하지 않으므로 피하는 것이 좋다( 7장에서 자세히 다룸)

