Chapter4 스트림

4.1 스트림이란?

스트림은 자바 8 API에 새로 추가된 기능이다.
정의: java.util.stream.Stream

스트림을 통해 선언형으로 컬렉션 데이터를 처리할 수 있다.

 * 기타 라이브러리
 - 구아바 : 구글이 만든 라이브러리로 멀티맵, 멀티셋 등 추가적인 컨테이너를 제공
 - 아파치 공통 컬렉션 : 구아바와 비슷한 기능 제공
 - 람다제이 : 선언혀으로 컬렉션을 제어하는 다양한 유틸리티를 제공

스트림 특징
    선언형 (더 간결하고 가독성이 좋아진다.)
    조립할 수 있다 (유연성이 좋아진다..)
    병렬화 (성능이 좋아진다.)



4.2 스트림 시작

스트림 정의
    - 연속된 요소
        컬렉션과 마찬가지로 스트림은 특정 요소 형식으로 이루어진 연속된 값 집합의 인터페이스를 제공

    - 소스
        리스트로 스트림을 만들려면 스트림의 요소는 리스트의 요소와 같은 순서를 유지

    - 데이터 처리 연산
        스트림 연산은 순차적으로 또는 병렬로 실행

    - 파이프라이닝
        스트림 연산은 스트림 연산끼리 연결해서 커다란 파이프라인을 구성할 수 있도록 스트림 자신을 반환

    - 내부 반복
        스트림은 내부 반복을 지원
        컬렉션은 반복자를 이용해서 명시적으로 반복을 한다.



         ========================  예제 =========================

        List<String> threeHighCaloricDishNames = menu.stream().filter(dish -> dish.getCalories() > 300)
                .map(Dish::getName)
                .limit(3)
                .collect(toList());
        System.out.println(threeHighCaloricDishNames);

        - 데이터 소스를 연속된 요소를 스트림에 제공
        - collect를 제외한  모든 연산은 서로 파이프라인을 형성할 수 있도록 스트림을 반환

        * filter: 특정 요소를 제외
        * map: 한 요소를 다른 요소로 변환하거나 추출
        * limit: 스트림 크기를 축소
        * collect: 스트림을 다른 형식으로 변환 (예제에서는 리스트로 변환)



4.3 스트림과 컬렉션

    스트림과 컬렉션
    - 공통정 : 연속된 요소 형식의 값을 저장하는 자료구조의 인터페이스 제공
        * 연속된: 순차적으로 값에 접근한다는 것


    - 차이
    1. 데이터를 언제 처리하느냐가 가장 큰 차이
        - 컬렉션: 현재 자료구조가 포함하는 모든 값을 메모리에 저장하는 자료구조
                컬렉션의 모든 요소는 컬렉션에 추가하기 전에 계산

        - 스트림: 이론적으로 요청할 때만 요소를 계산하는 고정된 자료구조


    * 스트림은 단 한번만 소비가 가능하다.
     ==> 탐색한 요소를 다시 탐색하려면초기 데이터 소스에서 새로운 스트림을 만들어야한다.


     2. 데이터 반복 처리 방법
        - 컬렉션 : 컬렉션 인터페이스를 사용하려면 사용자가 직접 사용자가 직접 요소를 반복(외부반복)

        - 스트림 : 스트림 라이브러리를 통해 반복을 처리하고 저장(내부반복)

4.4 스트림 연산

    - 중간연산 : 연결할 수 있는 연산
        중간연산의 특징은 단말 연산을 스트림 파이프라인에 실행하기 전까지는 아무 연산도 수행하지 않는다는 것
        => 게으르다

    - 최종 연산 : 스트림을 닫는 연산


    * 스트림 파이프라인은 빌더패턴과 비슷하다.
